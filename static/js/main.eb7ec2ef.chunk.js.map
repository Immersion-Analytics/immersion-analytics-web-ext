{"version":3,"sources":["reportWebVitals.js","lib.js","control-panel/components.js","modals/RoomPasswordInput.js","IAOverviewDisplay.js","control-panel/connection-control-panel.js","IAExtensionController.js","modals/LoadingSpinner.js","control-panel/visualizations-control-panel.js","control-panel/IAControlPanel.js","platforms/tableau.js","platforms/web.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","DialogModeHash","usePropertyValue","getter","undefinedValue","onChanged","_useIAObject","propertyValue","useIAObject","value","undefined","_iaObject","iaObject","_unused","_useState","useState","setRefresh","_slicedToArray","objectId","_netWrapper","_id","useEffect","parseJSON","jsonStr","JSON","parse","error","IA","window","ZeroWidthSpace","_jsx","children","useConnectionState","ia","getCompleteConnectionState","state","connectionStateMessage","id","connectionState","_useState2","setConnectionState","onStateChanged","ConnectionStatus","props","app","otherProps","_objectWithoutProperties","_excluded","label","_jsxs","_objectSpread","style","color","util","iaColorToCSS","message","IALogo","width","height","Image","src","ConnectionIcon","MdCastConnected","className","VisualizationsIcon","GiSunglasses","RefreshIcon","IoMdRefresh","AddIcon","ImPlus","DeleteIcon","IoCloseCircle","TrashIcon","MdDelete","EyeIcon","on","AiFillEye","AiFillEyeInvisible","IconButton","_className","icon","_excluded2","Button","React","createElement","ReconnectLobbyButton","onClick","reconnectToLobby","PropertyBoundTextField","propertyGetter","validate","_useState5","_useState6","fieldValue","setFieldValue","_useState7","_useState8","focused","setFocused","getValidationError","validationError","valid","TextField","onChange","e","_propertyGetter","inputValue","target","set","onFocus","onBlur","kind","RoomPasswordInput","passwordRef","createRef","show","setShow","_useState3","_useState4","uri","setUri","setMessage","handleSubmitPassword","preventDefault","password","current","provideRoomPassword","onRequestRoomPassword","msg","details","Modal","onHide","disconnectRoom","autoFocus","Header","closeButton","Title","Body","Form","inline","onSubmit","Label","Control","type","size","ref","Footer","IAOverviewDisplay","showConfig","panel","dialogUrl","concat","location","origin","platform","console","log","openDialog","density","ConnectionControlPanel","_app$ia$lobbyServerUr","_app$ia$roomServerUri","joiningOrJoinedRoom","isJoiningOrJoinedRoom","disableConnectButton","includes","showAddressModal","setShowAddressModal","roomNameRef","roomPasswordRef","viewerPasswordEnabled","setViewerPasswordEnabled","viewerPasswordRef","Container","ServerAddressModal","Table","borderless","IoGlobeOutline","RecentServerSelect","onSelect","address","lobbyServerUri","disabled","colSpan","Checkbox","checked","roomServerUri","joinOrCreateRoom","DropdownButton","title","getRecentServers","map","server","Dropdown","Item","eventKey","url","name","lastLobbyServerAddress","setAddress","handleHide","setTimeout","showDisconnect","actionButton","disconnectLobby","content","placeholder","confirm","IA_MAX_ROWS_TO_LOAD","IAExtensionController","iaClient","errorCallback","_this","_classCallCheck","this","scene","database","onRoomPasswordRequired","_handleRoomPasswordRequired","onRoomPasswordRequest","_lastRoomPassword","connectionInfo","_createClass","key","_this$ia$room","info","stringify","lobby","room","saveSettings","settings","parsedInfo","retryConnectionInfo","_info$lobby","_info$room","disconnectLobbyServer","disconnect","lobbyServer","connectToLobbyServer","_info$room2","roomServer","connectToRoom","actionSubject","_handleError","saveConnectionInfo","viewerPassword","dataSrc","viz","getSelectedViz","axes","sourceDataset","createTableForDataSource","vizName","visualizations","getKey","focusedViz","fullRefresh","primaryAxes","config","_axisMappingsTable","rows","data","i","length","axis","mapping","getMapping","enabled","variableName","clear","add","draw","result","db","dataset","get","secondaryDataset","secondaryAxes","_getUniqueVisualizationName","create","ScatterViz","selectViz","remove","vizs","baseName","containsKey","syncEngine","reset","LoadingSpinner","backdrop","keyboard","Spinner","VisualizationsControlPanel","_scene$focusedViz","selection","datasetName","sourceDatasetProperty","variables","colormaps","currentColormapName","colormapNameProperty","pointSizeProperty","vizSettings","count","VisualizationsSelect","selectedVizName","vizNames","keys","_scene$focusedViz2","nameProperty","DataSourceSelectView","selectedDatasetName","min","max","step","parseFloat","isFinite","DropdownSelect","colormapName","defaultColormapName","availableColormapNames","AxisMappings","axisGroup","onGetDatasetVariables","onCheckVariableExists","newViz","removeSelectedViz","confirmResetScene","_selectedDataset$rowC","selectedDataset","rowCount","variableCount","rowCountWarning","Row","DataSourceSelect","Col","datasets","loading","setLoading","buildDataSourcesArray","platformDataSources","items","push","sectionHeaderName","enabledLoadingSpinner","dataSourceItems","setDataSourceItems","getDataSourcesAsync","item","index","dimension","setCurrentVisualizationDataSource","striped","mappingInfo","axisName","AxisMappingRow","renderVariableNames","setRenderVariableNames","variableMissing","handleVariableSelected","eyeButton","mappings","setMappingEnabled","variableText","IAControlPanel","history","useHistory","platformId","panelId","tabs","component","selectedTabIndex","fluid","Tabs","activation","onTabChange","panelUrl","hash","getPanelUrl","_window","tableau","$","IATableauPlatformId","IATableauSourceType","Tableau2IADataTypeLookup","IATableauPlatform","_datasetBindings","callbacks","$this","isDialogMode","extensions","initializeAsync","_updateBindings","_handleInitialized","catch","_this2","addEventListener","TableauEventType","SettingsChanged","onSettingsChanged","newSettings","onInitialized","getAll","options","ui","displayDialogAsync","closePayload","errorCode","ErrorCodes","DialogClosedByUser","DialogAlreadyOpen","alert","changed","Object","entries","forEach","entry","_entry","saveAsync","Dataset","sourceType","srcInfo","sourceInfo","worksheetName","_this3","worksheet","_getTableauWorksheet","binding","IATableauDataSourceBinding","logicalTableId","dispose","Promise","all","dashboardContent","dashboard","worksheets","_getDataSourcesForWorksheetAsync","dataSources","apply","_toConsumableArray","getUnderlyingTablesAsync","tables","table","sheetName","find","sheet","allDatasets","tableauWorksheet","tableId","_unregisterListenerFunctions","updateData","_unregisterListeners","unregister","MarkSelectionChanged","FilterChanged","getDataAsync","setTableData","_registerListeners","includeAllColumns","maxRows","getUnderlyingTableDataAsync","formatUnderlyingTableData","getSummaryDataAsync","formatSummaryTableData","worksheetData","dataRows","columns","column","dataType","fieldName","row","nativeValue","worksheetSummaryData","dimensions","measureNamesIndex","measureValuesIndex","hasMeasures","itemsLookup","resultColumnNameTypeLookup","_entry2","itemKey","formattedValue","measureName","measureValue","itemsArray","values","_entry3","columnName","columnType","dataColumns","dataTable","filter","c","setData","IAWebPlatformId","IAWebPlatform","resolve","platformConstructors","_platformConstructors","_defineProperty","ConnectionPanelId","panelConstructors","_panelConstructors","App","setIAClient","appController","setAppController","isPlatformLoading","setIsPlatformLoading","_useLocationInfo","segments","useLocation","pathname","split","components","useLocationInfo","platformConstructor","onReady","assert","createClient","init","handleSettingsChanged","initPlatform","handleConnectionStateChanged","stateId","handleRoomConnectionReady","onSyncReady","panelProps","panelConstructor","ReactDOM","render","Router","document","getElementById"],"mappings":"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","file":"static/js/main.eb7ec2ef.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect, useState} from \"react\";\n\n// Used to notify panels that they are a opened as a sub-dialog of the application\n// e.g. Used in Tableau platform to disable dataset binding management in dialogs\nexport const DialogModeHash = \"#dialog\";\n\n/** React Hook to get value of the IA model property returned by getter().\n * Refreshes component when property value changes.\n * If getter throws an exception, returned value will be set to undefined.\n */\nexport function usePropertyValue(getter, undefinedValue, onChanged) {\n    const propertyValue = useIAObject(getter)?.value;\n    return propertyValue === undefined ? undefinedValue : propertyValue;\n}\n\n/** React Hook to bind to any changes to the IA scene graph object returned by getter().\n * Refreshes component when the object's onChanged() event fires.\n * If getter throws an exception, returned value will be set to undefined.\n */\nexport function useIAObject(getter) {\n    let iaObject;\n    try {\n        iaObject = getter();\n    } catch {}\n\n    const [, setRefresh] = useState();\n    const objectId = iaObject?._netWrapper._id;\n\n    useEffect(() => {\n        setRefresh({});\n\n        if (!iaObject)\n            return;\n        return iaObject.onChanged(() => {\n            setRefresh({});     // must create a new object to force React to see it as a value change.\n        });\n\n    }, [objectId]);\n\n    return iaObject;\n}\n\n\n\nexport function getPanelUrl(platformId, panelId) {\n    let url = `/${platformId}-${panelId}`;\n    if (window.location.hash === DialogModeHash)\n        url += DialogModeHash;\n\n    return url;\n}\n\nexport function getParentPath(path) {\n    return path.substring(0, path.lastIndexOf('/'));\n}\n\n/** Like JSON.parse(), but does not throw an exception */\nexport function parseJSON(jsonStr) {\n    try {\n        return JSON.parse(jsonStr);\n    }\n    catch (error) {\n        return null;\n    }\n}\n\n\nexport function NotFoundPage(type) {\n    if (!type)\n        type = \"Page\";\n\n    return <h3>{type} not found</h3>\n}","import {Image} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport {\n    AiFillEye, AiFillEyeInvisible,\n    GiSunglasses,\n    ImPlus,\n    IoCloseCircle,\n    IoMdRefresh,\n    MdCastConnected,\n    MdDelete\n} from \"react-icons/all\";\nimport {Button, TextField} from \"@tableau/tableau-ui\";\nimport {usePropertyValue} from \"../lib\";\n\nconst {IA} = window;\n\nexport function ZeroWidthSpace() {\n    return (<span>&#8203;</span>);\n}\n\n\nexport function useConnectionState(ia, onChanged) {\n    function getCompleteConnectionState() {\n        const state = ia.connectionStateMessage;\n        state.id = ia.connectionState;\n        return state;\n    }\n\n    const [connectionState, setConnectionState] = useState(getCompleteConnectionState());\n    useEffect(() => {\n        // Note: returned function unbinds onStateChanged() listener on effect cleanup\n        return ia.onStateChanged(() => {\n            const state = getCompleteConnectionState();\n            setConnectionState(state);\n            if (onChanged)\n                onChanged(state);\n        });\n    })\n    return connectionState;\n}\n\nexport function useRoomInfo(ia) {\n    const [roomInfo, setRoomInfo] = useState(ia.room)\n    useEffect(() => {\n        return ia.onRoomChanged(room => {\n            setRoomInfo(room);\n        })\n    });\n    return roomInfo;\n}\n\nexport function isJoiningOrJoinedRoom(connectionState) {\n    const {id} = connectionState;\n    return id === \"JoiningRoom\" || id === \"JoinedRoom\";\n}\n\nexport function ConnectionStatus(props) {\n    const {app, ...otherProps} = props;\n    const connectionState = useConnectionState(app.ia);\n\n    const label = 'label' in props ? <span>Connection Status:&nbsp;</span> : null;\n\n    return (\n        <span style={{color:IA.util.iaColorToCSS(connectionState.color)}} {...otherProps}>\n            {label}\n            <span>{connectionState.message}</span>\n            <ZeroWidthSpace />\n        </span>);\n}\n\nexport function IALogo(props) {\n    let {width} = props;\n    if (width === undefined)\n        width = 100;\n    const height = width * (454.0 / 2048);\n    return <Image src='./img/ia-logo-and-text.png' width={width} height={height} {...props} />\n}\n\nexport const ConnectionIcon = () => <MdCastConnected className='connection-icon' />;\nexport const VisualizationsIcon = () => <GiSunglasses className='visualizations-icon' />;\nexport const RefreshIcon = () => <IoMdRefresh className='refresh-icon text-success' />;\nexport const AddIcon = () => <ImPlus className='add-icon text-success' />;\nexport const DeleteIcon = () => <IoCloseCircle className='delete-icon text-danger' />;\nexport const TrashIcon = () => <MdDelete className={'trash-icon'} />;\n\nexport const EyeIcon = props => {\n    const {on} = props;\n    return on\n        ? <AiFillEye className='eye-icon' />\n        : <AiFillEyeInvisible className='eye-icon text-muted' />\n}\n\nexport function IconButton(props) {\n    let {icon, className, ...otherProps} = props;\n    className = \"icon-btn \" + (className ?? '');\n    return <Button className={className} {...otherProps}>\n        {React.createElement(icon)}\n    </Button>\n}\n\nexport function ReconnectLobbyButton(props) {\n    const {app} = props;\n    return (\n        <IconButton\n                icon={RefreshIcon}\n                onClick={() => app.reconnectToLobby()}\n                {...props} />\n    );\n}\n\nexport function DisconnectLobbyButton(props) {\n    const {app} = props;\n    return (\n        <IconButton\n            icon={DeleteIcon}\n            onClick={() => app.disconnectLobby()}\n            {...props} />\n    );\n}\n\nexport function PropertyBoundTextField(props) {\n    const {propertyGetter, validate} = props;\n\n    const propertyValue = usePropertyValue(propertyGetter, '');\n    const [fieldValue, setFieldValue] = useState(propertyValue);\n\n    // While field is focused, input onChange() sets value,\n    // Otherwise, value is pulled from the bound property\n    const [focused, setFocused] = useState();\n\n    if (!focused && fieldValue !== propertyValue)\n        setFieldValue(propertyValue);\n\n    const getValidationError = value => validate ? validate(value) : undefined;\n\n    const validationError = getValidationError(fieldValue);\n    const valid = validationError === undefined ? undefined : false;\n    let message = validationError ?? '\\u200b'; // zero width space\n\n    const handleInputChanged = e => {\n        const inputValue = e.target.value;\n        setFieldValue(inputValue);\n        if (!getValidationError(inputValue))\n            propertyGetter()?.set(inputValue);\n    }\n\n    return (\n        <TextField value={fieldValue}\n                   onChange={handleInputChanged}\n                   onFocus={() => setFocused(true)}\n                   onBlur={() => setFocused(false)}\n                   valid={valid}\n                   message={message}\n                   // onBlur={setFieldValue(propertyValue)}\n                   kind='line'\n        />\n    );\n}\n\n\n","import {Form, Modal} from \"react-bootstrap\";\nimport {Button, TextField} from \"@tableau/tableau-ui\";\nimport {createRef, useState} from \"react\";\n\nexport function RoomPasswordInput(props) {\n    const { app } = props;\n\n    const passwordRef = createRef();\n    const [ show, setShow ] = useState();\n    const [ uri, setUri ] = useState();\n    const [ message, setMessage ] = useState();\n\n    const handleSubmitPassword = e => {\n        e.preventDefault();\n        setShow(false);\n        let password = passwordRef.current.value;\n        app.provideRoomPassword(uri, password);\n    }\n\n    const handleHide = () => {\n        setShow(false);\n        app.disconnectRoom();   // Cancel connection attempt\n    };\n\n    app.onRequestRoomPassword = (uri, msg) => {\n        setShow(true);\n        setUri(uri);\n        setMessage(msg.details);\n    };\n\n    return (\n        <Modal id='pw-input-modal' show={show} onHide={handleHide} autoFocus={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>Enter Password</Modal.Title>\n                {/*<span className='pw-msg'>{message}</span>*/}\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form inline onSubmit={handleSubmitPassword}>\n                    <Form.Label>\n                        {message}\n                        :\n                        <Form.Control className='ml-1 pw-input'\n                                      type='password'\n                                      size='sm'\n                                      ref={passwordRef}\n                                      autoFocus={true} />\n                    </Form.Label>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={handleSubmitPassword}>Submit</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","/**\n * ©2021 Virtual Cove, Inc. d/b/a Immersion Analytics. All Rights Reserved. Patented.\n *\n * Immersion Analytics Runtime - Tableau Dashboard Extension\n * Utilizes the Immersion Analytics Runtime javascript API and Tableau Dashboard Extensions API\n * to drive holographic visualizations in AR/VR/XR devices like Hololens2 or Oculus from a Tableau dashboard\n */\n\n\nimport React from 'react';\nimport {Button} from \"@tableau/tableau-ui\";\n\nimport {\n    ConnectionIcon,\n    ConnectionStatus,\n    IALogo,\n    RetryConnectionInfoButton,\n    VisualizationsIcon\n} from \"./control-panel/components\";\nimport {DialogModeHash} from \"./lib\";\nimport {RoomPasswordInput} from \"./modals/RoomPasswordInput\";\n\n\nfunction IAOverviewDisplay(props) {\n    const {app} = props;\n\n    const showConfig = (panel) => {\n        const dialogUrl = `${window.location.origin}/${app.platform.id}-${panel}${DialogModeHash}`;\n        console.log(\"Opening IA dialog at \" + dialogUrl);\n\n        const dialogOptions = { width: 500, height: 500 };\n\n        app.platform.openDialog(dialogUrl, dialogOptions);\n    };\n\n    return (\n    <div className='d-flex flex-wrap align-items-center'>\n        <IALogo className='mr-2'/>\n\n        <Button className=\"mr-1 mt-1\" density='high'\n                onClick={() => showConfig('visualizations')}>\n\n            <VisualizationsIcon /><span>&nbsp;Visualizations</span>\n        </Button>\n        <Button className='mr-1 mt-1' density='high'\n                onClick={() => showConfig('connection')}>\n\n            <ConnectionIcon /><span>&nbsp;Connect</span>\n        </Button>\n        {/*<RetryConnectionInfoButton app={app}/>*/}\n        <ConnectionStatus app={app} className='mt-1 mx-2 flex-grow-1'/>\n        {/*</div>*/}\n            {/*    <Button className=\"icon-btn ia-show-console\" data-target=\"#console-out-modal\" data-toggle=\"modal\">*/}\n            {/*        <BsTerminal />*/}\n            {/*    </Button>*/}\n            {/*<span className=\"d-inline-block text-nowrap\">Connection Status:</span>&nbsp;*/}\n    </div>\n    );\n}\n\nexport default IAOverviewDisplay;","import React, {useRef, useState} from \"react\";\nimport {Container, Row, Col, Table, Dropdown, DropdownButton, Modal, ToggleButton} from \"react-bootstrap\";\nimport {Button, TextField, Checkbox} from \"@tableau/tableau-ui\";\nimport {\n    ReconnectLobbyButton,\n    useConnectionState,\n    isJoiningOrJoinedRoom,\n    ZeroWidthSpace,\n    ConnectionStatus, useRoomInfo\n} from \"./components\";\nimport {FiEdit, IoGlobeOutline} from \"react-icons/all\";\n\nfunction ConnectionControlPanel(props) {\n    const { app } = props;\n\n    const connectionState = useConnectionState(app.ia);\n    const joiningOrJoinedRoom = isJoiningOrJoinedRoom(connectionState);\n    const disableConnectButton = [\"Disconnected\", \"ConnectingToLobby\", \"Disconnecting\"].includes(connectionState.id);\n\n    const [showAddressModal, setShowAddressModal] = useState();//connectionState.id == \"Disconnected\");\n\n    const handleRecentAddressSelect = address => app.reconnectToLobby(address);\n\n    const roomNameRef = React.createRef();\n    const roomPasswordRef = React.createRef();\n    const [viewerPasswordEnabled, setViewerPasswordEnabled] = useState();   // refs don't seem to work with Checkbox\n    const viewerPasswordRef = React.createRef();\n    const handleJoinRoomButton = e => app.joinOrCreateRoom(\n        roomNameRef.current.value,\n        roomPasswordRef.current.value,\n        viewerPasswordEnabled ? viewerPasswordRef.current.value : null\n    );\n\n    return (\n        <Container id=\"ia-connect-panel\">\n            <ServerAddressModal app={app} show={showAddressModal} setShow={setShowAddressModal} />\n\n            {/* Runtime Server Settings */}\n            <Table borderless>\n                <thead>\n                <tr>\n                    <th>Runtime Server</th>\n                    <th className=\"d-flex align-items-center justify-content-end\">\n                        <Button kind='outline' density='high'\n                                onClick={() => setShowAddressModal(true)}>\n                            <IoGlobeOutline />\n                            {/*<FiEdit />*/}\n                            &nbsp;\n                            Set Server Address\n                        </Button>\n\n                        <RecentServerSelect app={app} onSelect={handleRecentAddressSelect} />\n                        <ReconnectLobbyButton className='ml-2' app={app} />\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n                    <tr className={ app.ia.lobbyServerUri ? '' : 'text-muted'}>\n                        <td>Lobby Address</td>\n                        <td>{ app.ia.lobbyServerUri ?? 'Not Connected'}</td>\n                    </tr>\n                </tbody>\n            </Table>\n\n            {/*Room Settings*/}\n            <fieldset disabled={joiningOrJoinedRoom}>\n            <Table className=\"room-settings fullwidth-inputs\" borderless>\n                <thead>\n                    <tr>\n                        <th colSpan=\"2\">Collaboration Room</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Room Name</td>\n                        <td><TextField className=\"ia-room-name\" kind='line' ref={roomNameRef} /></td>\n                    </tr>\n                    <tr>\n                        <td>Room Password (optional)</td>\n                        <td><TextField type=\"password\" className='d-block' ref={roomPasswordRef}/></td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div className=\"d-flex align-items-center\">\n                                <span>Enable view-only access</span>\n                                <Checkbox className=\"px-2 mb-0\" checked={viewerPasswordEnabled} onChange={e => setViewerPasswordEnabled(e.target.checked)}/>\n                            </div>\n                        </td>\n                        <td className={\"d-flex align-items-center\" + (viewerPasswordEnabled ? '' : ' text-muted')}>\n                            <span className=\"mr-1\">Viewer password</span>\n                            <TextField type=\"password\" className=\"flex-grow-1\" ref={viewerPasswordRef} disabled={!viewerPasswordEnabled} />\n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n            </fieldset>\n\n            <div className=\"d-flex align-items-center\">\n                <span className={ 'flex-grow-1 ' + (app.ia.roomServerUri ? '' : 'text-muted')}>\n                    <span className=\"d-inline-block\">Room Address:</span>\n                    <span className=\"px-2 d-inline-block\">{ app.ia.roomServerUri ?? 'Not Connected'}</span>\n                </span>\n                <Button density='high'\n                        className=\"flex-shrink-0\"\n                        onClick={ joiningOrJoinedRoom ? () => app.disconnectRoom() : handleJoinRoomButton }\n                        disabled={disableConnectButton}>\n                    { joiningOrJoinedRoom ? \"Disconnect From Room\" : \"Join or Create Room\" }\n                </Button>\n                    {/*<button className=\"btn btn-primary\" type=\"button\" data-dismiss=\"modal\">Close</button>*/}\n            </div>\n        </Container>\n);\n}\n\nexport default ConnectionControlPanel;\n\n\nfunction RecentServerSelect(props) {\n    const {app, onSelect} = props;\n    \n    return (\n        <DropdownButton className=\"text-input-with-dropdown\"\n                        title=''\n                        onSelect={onSelect}>\n            {\n                app.getRecentServers().map(server => {\n                    return (\n                        <Dropdown.Item key={server.url} eventKey={server.url}>\n                            {server.name}\n                        </Dropdown.Item>\n                    );\n                })\n            }\n        </DropdownButton>\n    );\n}\n\nfunction ServerAddressModal(props) {\n    const {show, setShow, app} = props;\n    const [address, setAddress] = useState(app.lastLobbyServerAddress);\n\n    const handleAddressInput = e => setAddress(e.target.value);\n\n    const handleDisconnect = e => app.disconnectLobby(true);\n    const handleConnect = e => app.reconnectToLobby(address);\n\n    const handleRecentAddressSelect = address => {\n        setAddress(address);\n    };\n\n    const handleHide = () => setShow(false);\n\n    // Auto close on successful connection\n    const handleConnectionStateChanged = state => {\n        if ([\"ConnectedToLobby\", \"JoinedRoom\"].includes(state.id))\n            setTimeout(handleHide, 500);\n    }\n\n    const connectionState = useConnectionState(app.ia, handleConnectionStateChanged);\n\n    const showDisconnect = [\"ConnectingToLobby\", \"ConnectedToLobby\", \"JoiningRoom\", \"JoinedRoom\"].includes(connectionState.id);\n    let actionButton = {\n        onClick: showDisconnect ? handleDisconnect : handleConnect,\n        content: showDisconnect ? \"Disconnect\" : \"Connect\"\n    };\n\n    return (\n        <Modal show={show}\n               onHide={handleHide} >\n            <Modal.Header closeButton>\n                <Modal.Title><h6>Enter Server Address</h6></Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"d-flex align-items-center fullwidth-inputs\">\n                <TextField className=\"text-input-with-dropdown flex-grow-1\"\n                           placeholder='ws://'\n                           onChange={handleAddressInput}\n                           value={address}\n                />\n                <RecentServerSelect app={app}\n                                    onSelect={handleRecentAddressSelect}/>\n            </Modal.Body>\n            <Modal.Footer>\n                <ConnectionStatus app={app} />\n                <Button onClick={handleHide}>Close</Button>\n                <Button onClick={actionButton.onClick} kind='primary'>{actionButton.content}</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n","/**\n * ©2021 Virtual Cove, Inc. d/b/a Immersion Analytics. All Rights Reserved. Patented.\n *\n * Immersion Analytics Runtime - Tableau Dashboard Extension\n * Utilizes the Immersion Analytics Runtime javascript API and Tableau Dashboard Extensions API\n * to drive holographic visualizations in AR/VR/XR devices like Hololens2 or Oculus from a Tableau dashboard\n */\nimport {parseJSON} from \"./lib\";\n\nconst {confirm} = window;\n\nexport const IA_MAX_ROWS_TO_LOAD = 2000\n\nexport class IAExtensionController {\n    constructor(platform, iaClient, errorCallback)\n    {\n        this.platform = platform;\n        this.errorCallback = errorCallback;\n\n        console.log(\"Initialize IA\");\n\n        this.ia = iaClient;\n        this.scene = this.ia.scene;\n        this.database = this.ia.scene.database;\n\n        this.ia.onRoomPasswordRequired((uri, msg) => this._handleRoomPasswordRequired(uri, msg));\n\n        this.lastLobbyServerAddress = '';\n\n        this.onRoomPasswordRequest = null;\n        this._lastRoomPassword = null;\n        this.connectionInfo = null;\n    }\n\n    saveConnectionInfo() {\n        const info = JSON.stringify({\n            lobby: {\n                server: this.ia.lobbyServerUri\n            },\n            room: {\n                server: this.ia.roomServerUri,\n                name: this.ia.room?.name,\n                password: this._lastRoomPassword,\n            },\n        });\n\n        try {\n            this.platform.saveSettings({\"ia-connection-info\": info});\n        }\n        catch (e) {\n            console.error(\"Error saving connection settings:\", e);\n        }\n    }\n\n    handleSettingsChanged(settings) {\n        console.log(\"Handling settings changed\");\n        const connectionInfo = settings[\"ia-connection-info\"];\n        if (connectionInfo)\n        {\n            const parsedInfo = parseJSON(connectionInfo);\n            if (!parsedInfo) {\n                console.log(\"Could not read connection info:\", connectionInfo);\n            }\n            this.connectionInfo = parsedInfo;\n            this.retryConnectionInfo();\n        }\n    }\n\n    retryConnectionInfo() {\n        const info = this.connectionInfo;\n        console.log(\"Trying connection info:\", info);\n\n        if (!info)\n        {\n            this.ia.disconnectLobbyServer();\n            this.ia.disconnect();\n            return;\n        }\n\n        const lobbyServer = info.lobby?.server;\n        if (lobbyServer !== this.ia.lobbyServerUri) {\n            this.ia.connectToLobbyServer(lobbyServer);\n        }\n\n        const roomServer = info.room?.server;\n        if (roomServer !== this.ia.roomServerUri) {\n            this.ia.connectToRoom(roomServer, info.room?.password);\n        }\n    }\n\n    _handleError(actionSubject, error) {\n        const message = `Error ${actionSubject}`;\n        console.error(message, error);\n        if (this.errorCallback)\n            this.errorCallback(message, error);\n    }\n\n    /** Reconnect to the IA Runtime Lobby Server URI entered in the server address input */\n    reconnectToLobby(address) {\n        // let address = this._serverAddressInput.val();\n        if (address)\n            this.lastLobbyServerAddress = address;\n\n        console.log(\"Reconnect to lobby: \" + this.lastLobbyServerAddress);\n\n\n        /* If this URI is a collab Room server rather than Lobby server,\n        * the IA runtime API will detect that and reconnect to it as\n        * a room server\n        */\n        try {\n            this.ia.connectToLobbyServer(this.lastLobbyServerAddress);\n        } catch (e) {\n            this._handleError(\"connecting to lobby server\", e);\n        }\n    }\n\n    disconnectLobby() {\n        this.ia.disconnectLobbyServer();\n        this.saveConnectionInfo();\n    }\n\n    disconnectRoom() {\n        this.ia.disconnect();   // ia.disconnect() only disconnects the room server\n        this.saveConnectionInfo();\n    }\n    \n    getRecentServers() {\n        return [\n            // { url: 'ws://localhost:11701', name: 'Local Visualizer App' },\n            { url: 'ws://localhost:11700', name:'Local Runtime Server' },\n        ];\n    }\n\n    joinOrCreateRoom(name, password, viewerPassword) {\n        this._lastRoomPassword = password;\n        this.ia.joinOrCreateRoom(name, password, viewerPassword);\n    }\n\n    /** If the room we are trying to join requires a password, display a\n     * popup dialog allowing the user to enter the password.\n     */\n    _handleRoomPasswordRequired(uri, msg) {\n        if (this.onRequestRoomPassword)\n            this.onRequestRoomPassword(uri, msg);\n    }\n\n    provideRoomPassword(uri, password) {\n        this._lastRoomPassword = password;\n        this.ia.provideRoomPassword(uri, password);\n        // If this password leads to a successful connection, it will be saved\n        // to connectionInfo when room is joined\n    }\n\n    /** Create an IA table for `dataSrc` and set it as the data source\n     * for the currently selected visualization\n     * @param dataSrc\n     *     name: Displayed name\n     *     type: data source type ('tableau' for Tableau worksheet Logical Tables)\n     *     logicalTableId: Tableau logical table ID\n     *\n     */\n    setCurrentVisualizationDataSource(dataSrc) {\n        console.log(\"Set Data Source: \" + dataSrc.name);\n        let viz = this.getSelectedViz();\n        if (!viz)\n            return;\n\n        viz.axes.sourceDataset = dataSrc.name;\n        this.platform.createTableForDataSource(dataSrc);\n    }\n\n    /** Select a Visualization by name.\n     * Also selects this Visualization in the IA Runtime Scene.\n     */\n    selectViz(vizName) {\n        const viz = this.scene.visualizations.getKey(vizName);\n        if (viz)        // TODO 8/31/21 fix Runtime SetProperty() for null model value\n            this.scene.focusedViz = viz;\n    }\n\n    /** Shortcut to retrieve the selected Visualizations from the internally stored name reference */\n    getSelectedViz() {\n        return this.scene.focusedViz;\n    }\n\n    /** Refresh data in the  Axis=>Variable mappings table */\n    _updateMappings(viz, fullRefresh) {\n        if (!viz)\n        {\n            this._axisMappingsTable.clear().draw();\n            return;\n        }\n\n        let primaryAxes = viz.axes;\n\n        let axes = fullRefresh\n            ? primaryAxes.config.axes\n            : this._axisMappingsTable.rows().data();\n\n        for (let i=0; i<axes.length; i++)\n        {\n            let axis = axes[i];\n            let mapping = primaryAxes.getMapping(axis.name);\n            axis.enabled = mapping ? mapping.enabled : false;\n            axis.mapping = mapping ? mapping.variableName : \"\";\n        }\n\n        this._axisMappingsTable\n            .clear()\n            .rows.add(axes)\n            .draw();\n    }\n\n\n    getSelectedDataset() {\n        let result = {}\n        let viz = result.viz = this.getSelectedViz();\n        if (viz)\n        {\n            let db = this.ia.scene.database;\n            result.dataset = db.get(viz.axes.sourceDataset);\n            result.secondaryDataset = db.get(viz.secondaryAxes.sourceDataset);\n        }\n        return result;\n    }\n\n\n    /** Create a new IA Visualization with default settings */\n    newViz() {\n        console.log(\"Create new visualization\");\n        let vizName = this._getUniqueVisualizationName();\n        let viz = this.ia.create.ScatterViz(vizName);\n        this.scene.visualizations.add(viz);\n        this.selectViz(vizName);\n    }\n\n    /** Removes the selected viz from the scene */\n    removeSelectedViz() {\n        let viz = this.scene.focusedViz;\n        if (!viz)\n            return;\n        console.log(\"Remove visualization: \" + viz.name);\n        this.scene.visualizations.remove(viz);\n    }\n\n    /** Find the next available default name for a new Visualization */\n    _getUniqueVisualizationName() {\n        let vizs = this.ia.scene.visualizations;\n\n        let baseName = \"New Visualization\";\n        if (!vizs.containsKey(baseName))\n            return baseName;\n\n        baseName = baseName + \" \";\n\n        for (let i=1; i<1000; i++)\n        {\n            let name = baseName + i;\n            if (!vizs.containsKey(name))\n                return name;\n        }\n        throw \"Too many visualizations\";\n    }\n\n    confirmResetScene() {\n        if (confirm(\"Are you sure you would like to clear this scene and all of its existing visualizations?\"))\n            this.ia.syncEngine.reset();\n    }\n}\n\nexport default IAExtensionController;","import {Collapse, Modal} from \"react-bootstrap\";\nimport {Button, Spinner} from \"@tableau/tableau-ui\";\nimport {BsTerminal} from \"react-icons/all\";\nimport \"../styles.css\";\n\n\nfunction LoadingSpinner()\n{\n    return (\n        <Modal show className='text-nowrap' id='loading-spinner-modal' backdrop='static' keyboard={false}>\n            <div className=\"loading-spinner-icon\" aria-busy><Spinner /></div>\n            <div className=\"loading-msg\">Loading</div>\n            {/*<div>*/}\n            {/*    <Button className=\"ia-show-console\" data-toggle=\"collapse\" data-target=\"#loading-console-display\">*/}\n            {/*        <BsTerminal />*/}\n            {/*    </Button>*/}\n            {/*</div>*/}\n            {/*<Collapse id=\"loading-console-display\">*/}\n            {/*    /!*Content moved here from main console display *!/*/}\n            {/*</Collapse>*/}\n        </Modal>\n    );\n}\n\nexport default LoadingSpinner;\n\n\n\n// <div className=\"modal\" id=\"loading-spinner-modal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\">\n//     <div className=\"modal-dialog modal-sm modal-dialog-scrollable\">\n//         <div className=\"modal-content text-nowrap\">\n//             <div className=\"loading-spinner-icon\"><i className=\"icon ion-load-c\"></i></div>\n//             <div className=\"loading-msg\">Loading</div>\n//             <div>\n//                 <button className=\"btn ia-show-console\" type=\"button\" data-toggle=\"collapse\"\n//                         data-target=\"#loading-console-display\"><i className=\"material-icons\">personal_video</i></button>\n//             </div>\n//             <div className=\"collapse\" id=\"loading-console-display\">\n//                 <!-- Content moved here from main console display -->\n//             </div>\n//         </div>\n//     </div>\n// </div>\n","import {Col, Container, DropdownButton, Dropdown, Row, Table} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport {Button, DropdownSelect, Spinner, TextField} from \"@tableau/tableau-ui\";\n\nimport {AddIcon, DeleteIcon, EyeIcon, IconButton, TrashIcon, PropertyBoundTextField} from \"./components\";\nimport {IA_MAX_ROWS_TO_LOAD} from \"../IAExtensionController\";\n\nimport {useIAObject, usePropertyValue} from \"../lib\";\nimport LoadingSpinner from \"../modals/LoadingSpinner\";\n\n\nfunction VisualizationsControlPanel(props) {\n    const {app} = props;\n    const {scene} = app;\n\n    // re-render when selection changes\n    usePropertyValue(() => scene.selection);\n    const visualizations = usePropertyValue(() => scene.visualizations);\n    const datasetName = usePropertyValue(() => scene.focusedViz.axes.sourceDatasetProperty);\n    const variables = useIAObject(() => scene.database.get(scene.focusedViz.axes.sourceDataset).variables);\n\n    const colormaps = useIAObject(() => scene.colormaps);\n    const currentColormapName = usePropertyValue(() => scene.focusedViz.colormapNameProperty);\n\n    const pointSizeProperty = useIAObject(() => scene.vizSettings.pointSizeProperty);\n\n    // Auto select the first visualization if one is not selected\n    useEffect(() => {\n        if (!scene.focusedViz && visualizations?.count > 0)\n            scene.focusedViz = visualizations.get(0);\n    });\n\n    const handlePointSizeSlider = e => {\n        let value = parseFloat(e.target.value);\n        if (isFinite(value))\n            pointSizeProperty.set(value);\n    }\n\n    const handleColormapSelect = e => {\n        if (scene.focusedViz)\n            scene.focusedViz.colormapName = e.target.value;\n    }\n\n    const validateVizName = (name) => {\n        const viz = scene.focusedViz;\n\n        // If not selection, don't show a validation error\n        if (!viz)\n            return;\n\n        if (!name)\n            return \"Name must not be empty\";\n\n        // If another vizualization already has this name...\n        if (viz.name !== name && scene.visualizations.containsKey(name))\n            return \"Name already used\";\n\n        return undefined;\n    }\n\n    return (\n        <div className='container-lg h-100 px-0'>\n            <div className='container-lg'>\n                <VisualizationsSelect app={app}\n                                      selectedVizName={scene.focusedViz?.name}\n                                      vizNames={visualizations?.keys}/>\n                <fieldset disabled={!scene.focusedViz}>\n                    <Table borderless className='fullwidth-inputs'>\n                    <tbody className=\"ia-viz-info\">\n                        <tr>\n                            <td>Visualization Name:</td>\n                            <td>\n                                {/* Sets the Name property for the selected IA Visualization */}\n                                <PropertyBoundTextField\n                                    propertyGetter={() => scene.focusedViz?.nameProperty}\n                                    validate={validateVizName} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Visualization Data Source:</td>\n                            <td>\n                                <DataSourceSelectView app={app} selectedDatasetName={datasetName} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Point Size:</td>\n                            <td>\n                                {/* Tableau UI doesn't yet have a slider component */}\n                                <input type=\"range\" className=\"custom-range\"\n                                       min=\".01\" max=\".15\" step=\".001\"\n                                       value={pointSizeProperty.value}\n                                       onChange={handlePointSizeSlider}\n                                    />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Colormap:</td>\n                            <td>\n                                <DropdownSelect className='w-100'\n                                                onChange={handleColormapSelect}\n                                                value={currentColormapName} >\n                                    <option value=''> - Default - ({colormaps.defaultColormapName})</option>\n                                    { colormaps.availableColormapNames.map(colormapName => {\n                                        return <option value={colormapName} key={colormapName}>{colormapName}</option>;\n                                    })}\n                                </DropdownSelect>\n                            </td>\n                        </tr>\n                    </tbody>\n                    </Table>\n                </fieldset>\n            </div>\n\n            { scene.focusedViz\n                ? <AxisMappings\n                              axisGroup={scene.focusedViz.axes}\n                              onGetDatasetVariables={() => variables?.keys}\n                              onCheckVariableExists={variableName => variables?.containsKey(variableName)}\n                />\n                : <h6 className='text-secondary text-center'>Please select a visualization</h6>\n            }\n        </div>\n    );\n}\n\nexport default VisualizationsControlPanel;\n\n\nfunction VisualizationsSelect(props) {\n    const {selectedVizName, vizNames, app} = props;\n\n    const makeVizSelectOption = vizName => <option key={vizName}>{vizName}</option>;\n\n    return (\n        <div className=\"d-flex justify-content-between\">\n            <div>\n                <DropdownSelect\n                    value={selectedVizName ?? ''}\n                        onChange={e => app.selectViz(e.target.value)}>\n                        { vizNames?.length > 0\n                            ? vizNames.map(makeVizSelectOption)\n                            : <option>- No Visualizations -</option>}\n                    </DropdownSelect>\n\n                    <IconButton icon={AddIcon} onClick={() => app.newViz()} />\n                    <IconButton icon={DeleteIcon} onClick={() => app.removeSelectedViz()} />\n            </div>\n            <div>\n                <Button kind='lowEmphasis'\n                        onClick={() => app.confirmResetScene()}>\n                    <TrashIcon /> Reset Scene\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nfunction DataSourceSelectView(props) {\n    const {app, selectedDatasetName} = props;\n\n    const selectedDataset = useIAObject(() => app.database.get(selectedDatasetName));\n    const rowCount = selectedDataset?.rowCount ?? 0;\n    const variableCount = selectedDataset?.variables.count;\n\n    const rowCountWarning = rowCount === IA_MAX_ROWS_TO_LOAD;\n\n    return (\n        <Container>\n            <Row>\n                <DataSourceSelect {...props} />\n            </Row>\n            <Row>\n                <Col className='text-right'>\n                    Rows: <span className={rowCountWarning ? 'text-danger' : ''}>{rowCount}</span>,\n                    Variables: {variableCount}\n                </Col>\n            </Row>\n        </Container>\n        );\n}\n\nfunction DataSourceSelect(props) {\n    const {app, selectedDatasetName} = props;\n\n    const datasets = usePropertyValue(() => app.database.datasets);\n\n    const [loading, setLoading] = useState();\n\n    const buildDataSourcesArray = (datasets, platformDataSources) => {\n        let items = [];\n\n        items.push({sectionHeaderName: \"Active Data Sources:\"});\n        if (datasets)\n            items = items.concat(datasets.keys.map(name => ({ name: name})));\n\n        items.push({sectionHeaderName: \"Available Data Sources:\", enabledLoadingSpinner: true})\n        if (platformDataSources)\n            items = items.concat(platformDataSources);\n\n        return items;\n    }\n\n    const [dataSourceItems, setDataSourceItems] = useState(buildDataSourcesArray(datasets));\n\n    const updateDataSources = () => {\n        setLoading(true);\n        app.platform.getDataSourcesAsync()\n            .then(platformDataSources => {\n                const items = buildDataSourcesArray(datasets, platformDataSources);\n                setDataSourceItems(items);\n                setLoading(false);\n            });\n    }\n\n    const makeDataSourceSelectItem = (item, index) => {\n        if (item.sectionHeaderName)\n            return (\n                <Dropdown.Item disabled key={index}>\n                    {item.sectionHeaderName}\n                    {loading && item.enabledLoadingSpinner ? <Spinner className='inline-spinner' dimension={15} /> : null}\n                </Dropdown.Item>);\n\n        return (\n            <Dropdown.Item key={index}\n                           onClick={() => app.setCurrentVisualizationDataSource(item)}>\n                {item.name}\n            </Dropdown.Item>\n        );\n    }\n\n    let dropdownClass = 'flex-grow-1 text-right';\n\n    return (\n        <DropdownButton title={selectedDatasetName ? selectedDatasetName : \"<Select Data Source>\"}\n                        onClick={updateDataSources}\n                        className={dropdownClass}\n                        >\n            { dataSourceItems.map(makeDataSourceSelectItem) }\n        </DropdownButton>\n    );\n}\n\nfunction AxisMappings(props) {\n    const {axisGroup, onGetDatasetVariables, onCheckVariableExists} = props;\n\n    // re-render if the axis mappings list property changes\n    useIAObject(() => axisGroup);\n\n    const makeMappingRow = axis => {\n        const mappingInfo = axisGroup.getMapping(axis.name);\n        mappingInfo.axisName = axis.name;   // ensure this is set\n        return (\n            <AxisMappingRow\n                key={axis.name}\n                {...mappingInfo}\n                axisGroup={axisGroup}\n                onGetDatasetVariables={onGetDatasetVariables}\n                onCheckVariableExists={onCheckVariableExists} />\n        );\n    };\n\n    return (\n        <Table striped borderless id='ia-axis-mappings'>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>Axis</th>\n                    <th>Variable</th>\n                </tr>\n            </thead>\n            <tbody>\n                {/* axes.config.axes returns an array of the available axis definitions for this axis group */}\n                { axisGroup.config.axes.map(makeMappingRow) }\n            </tbody>\n        </Table>\n    )\n}\n\nfunction AxisMappingRow(props) {\n    const {axisName, variableName, enabled, onCheckVariableExists, axisGroup, onGetDatasetVariables} = props;\n\n    // Avoid rendering all variable select dropdown items unless user has clicked the dropdown menu\n    const [renderVariableNames, setRenderVariableNames] = useState();\n\n    const variableMissing = variableName && !onCheckVariableExists(variableName);\n\n    const handleVariableSelected = variableName => {\n        axisGroup.map(axisName, variableName);\n\n        // Clear dropdown menu dom contents\n        setRenderVariableNames(undefined);\n    };\n\n    const makeVariableSelectOption = variableName => {\n        return (\n            <Dropdown.Item key={variableName}\n                           onClick={() => handleVariableSelected(variableName)}>\n                {variableName}\n            </Dropdown.Item>\n        );\n    }\n\n    let eyeButton = null;\n    if (variableName)\n    {\n        /// Create a toggle cell to enable/disable the current Axis=>Variable mapping\n        eyeButton = (\n            <Button className='icon-btn'\n                    onClick={ () => axisGroup.mappings.setMappingEnabled(axisName, !enabled) }\n                    disabled={!variableName}>\n                <EyeIcon on={enabled} />\n            </Button>\n        );\n    }\n\n    let variableText = variableName ?? '';\n    if (variableMissing)\n        variableText += ' <Missing in Dataset>';\n\n    return (\n        <tr className='ia-axis-mapping-row'>\n            <td>\n                { eyeButton }\n            </td>\n            <td>\n                {axisName}\n            </td>\n            <td>\n                <DropdownButton title={variableText}\n                                onClick={() => setRenderVariableNames(onGetDatasetVariables())}   // Fill dropdown contents\n                                size='lg'\n                                className={'ia-axis-mapping' + (variableMissing ? ' missing' : '')}\n                >\n                    <Dropdown.Item key='-'\n                                   onClick={() => handleVariableSelected(null)}>\n                        &lt;Unmapped&gt;\n                    </Dropdown.Item>\n                    { renderVariableNames?.map(makeVariableSelectOption) }\n                </DropdownButton>\n            </td>\n            <td className='buttons'>\n                { variableName\n                    ? <IconButton icon={DeleteIcon}\n                                onClick={() => handleVariableSelected(null)} />\n                    : null\n                }\n            </td>\n        </tr>\n    );\n}\n","/**\n * ©2021 Virtual Cove, Inc. d/b/a Immersion Analytics. All Rights Reserved. Patented.\n *\n * Immersion Analytics Runtime - Tableau Dashboard Extension\n * Utilizes the Immersion Analytics Runtime javascript API and Tableau Dashboard Extensions API\n * to drive holographic visualizations in AR/VR/XR devices like Hololens2 or Oculus from a Tableau dashboard\n */\nimport {Container, Col, Modal} from \"react-bootstrap\";\nimport {Tabs} from \"@tableau/tableau-ui\";\nimport ConnectionControlPanel from \"./connection-control-panel\";\nimport VisualizationsControlPanel from \"./visualizations-control-panel\";\nimport {useHistory} from 'react-router-dom'\nimport {getPanelUrl} from \"../lib\";\nimport {ConnectionIcon, ConnectionStatus, IALogo, VisualizationsIcon} from \"./components\";\nimport {RoomPasswordInput} from \"../modals/RoomPasswordInput\"\n\n\nfunction IAControlPanel(props) {\n    const history = useHistory();\n    // const routeMatch = useRouteMatch();\n    let { app, platformId, panelId } = props;\n\n    const tabs = [\n        { content: <span><ConnectionIcon /> Connection</span>, id: \"connection\", component: props => <ConnectionControlPanel {...props} /> },\n        { content: <span><VisualizationsIcon /> Visualizations</span>, id: \"visualizations\", component: props => <VisualizationsControlPanel {...props} /> }\n    ]\n\n    console.log(\"current panel: \" + panelId)\n\n    const tabIndexLookup = {\n        '' : 0,\n        'connection' : 0,\n        'visualizations' : 1,\n    }\n\n    if (panelId === undefined)\n        panelId = '';\n\n    const selectedTabIndex = tabIndexLookup[panelId];\n    if (selectedTabIndex === undefined)\n        return (<div>Unknown Panel</div>);\n\n    console.log(\"Launching IA Control Panel\");\n\n    const goToPanel = index => {\n        const panelUrl = getPanelUrl(platformId, tabs[index].id);\n        history.push(panelUrl);\n    };\n\n\n    return (\n        <Container fluid className='d-flex flex-column h-100vh'>\n            <div className='px-2 mb-2 d-flex flex-row'>\n                <Col>\n                    <IALogo />\n                </Col>\n                <Col className='text-right'>\n                    <ConnectionStatus app={app}/>\n                </Col>\n\n            </div>\n            <div className='flex-column flex-grow-1'>\n                <Tabs\n                    activation='manual'\n                    onTabChange={goToPanel}\n                    selectedTabIndex={selectedTabIndex}\n                    tabs={tabs}\n                    className='d-flex flex-column flex-grow-1'\n                    >\n                    { tabs[selectedTabIndex].component(props) }\n                </Tabs>\n            </div>\n            <RoomPasswordInput app={app} />\n        </Container>\n);\n}\n\nexport default (IAControlPanel);","\nimport {parseJSON} from \"../lib\";\nimport {DialogModeHash} from \"../lib\";\n\nconst {$, tableau} = window;\n\nexport const IATableauPlatformId = 'tableau';\n\n/** Source Type identifier applied to IA tables bound to Tableau data sources  */\nconst IATableauSourceType = 'tableau';\n\n/** Lookup for translating Tableau column data types to equivalent IA column types */\nconst Tableau2IADataTypeLookup = {\n    'bool' : 'bool',\n    'float' : 'float',\n    'int' : 'int',\n    'date' : 'timestamp',\n    'date-time' : 'timestamp',\n    'string' : 'string',\n    'spatial' : null,\n}\n\n/**\n * Integration layer binding Tableau Dashboard Extension API to Immersion Analytics Runtime API.\n * Retrieves list of datasources and creates IATableauDataSourceBindings between\n * Tableau Worksheet LogicalTables and IA data tables.\n */\nexport class IATableauPlatform {\n\n    constructor() {\n        this.id = IATableauPlatformId;\n        this._datasetBindings = {}\n    }\n\n    /** Initialize the Tableau dashboard extension API.\n     * Ensure the bindings list is updated any time a new IA table is added or removed\n     * in the IA runtime Database\n     */\n    init(ia, callbacks) {\n        let $this = this;\n        this.callbacks = callbacks;\n        this.ia = ia;\n        this.database = ia.scene.database;\n\n        const isDialogMode = window.location.hash === DialogModeHash;\n\n        tableau.extensions.initializeAsync()\n            .then(() => {\n                console.log(\"Tableau JS Initialized\");\n\n                if (!isDialogMode)\n                    $this.database.datasets.onChanged(() => $this._updateBindings());\n\n                this._handleInitialized();\n            })\n            .catch(error => {\n                console.error(\"Tableau initialization error:\", error);\n            });\n\n        // Bindings should not be managed by sub-dialogs of the extension\n        if (!isDialogMode)\n            this._updateBindings();\n    }\n\n    _handleInitialized() {\n        tableau.extensions.settings.addEventListener(tableau.TableauEventType.SettingsChanged, e => {\n            console.log(\"Tableau Extension Settings changed\");\n            this.callbacks.onSettingsChanged(e.newSettings);\n        });\n\n        this.callbacks.onInitialized();\n\n        // Load last saved settings from dashboard\n        this.callbacks.onSettingsChanged(tableau.extensions.settings.getAll());\n    }\n\n    openDialog(url, options) {\n        tableau.extensions.ui.displayDialogAsync(url, null, options)\n            .then((closePayload) => {\n                console.log(\"IA Dialog closed\");\n            })\n            .catch((error) => {\n                switch (error.errorCode) {\n                    case tableau.ErrorCodes.DialogClosedByUser:\n                        console.log(\"IA dialog closed by user\");\n                        break;\n                    case tableau.ErrorCodes.DialogAlreadyOpen:\n                        alert(\"The Immersion Analytics configuration dialog is already open in another window\");\n                        break;\n                    default:\n                        console.error(\"IA Dialog Error: \" + error.message);\n                }\n            });\n    }\n\n    saveSettings(settings) {\n        let changed = false;\n        Object.entries(settings).forEach(entry => {\n            const [key, value] = entry;\n            if (value === tableau.extensions.settings.get(key))\n                return;\n\n            tableau.extensions.settings.set(key, value);\n            changed = true;\n        });\n\n        if (!changed)\n            return;\n\n        tableau.extensions.settings.saveAsync()\n            .then(() => console.log(\"IA extension settings saved\"))\n            .catch(() => console.error(\"Could not save extension settings\"));\n    }\n\n    /**\n     * Create a new IA table based on data source metadata.\n     * @dataSrc.name is used for the IA table name.\n     * @dataSrc.type is recorded to the IA table's SourceType property.\n     * Any additional properties are written as json to the IA table's SourceInfo property\n     */\n    createTableForDataSource(dataSrc) {\n        let datasetName = dataSrc.name;\n        let dataset = this.database.get(datasetName);\n\n        if (!dataset)\n        {\n            dataset = this.ia.create.Dataset(datasetName)\n            this.database.datasets.add(dataset);\n        }\n\n        // Return early if table is already bound to this worksheet\n        if (dataset.sourceType === IATableauSourceType)\n        {\n            let srcInfo = parseJSON(dataset.sourceInfo);\n            if (srcInfo && srcInfo.worksheetName === dataSrc.worksheetName)\n                return;\n        }\n\n        dataset.sourceType = dataSrc.type;\n\n        delete dataSrc.name;\n        delete dataSrc.type;\n\n        // Write any remaining properties to SourceInfo as JSON\n        dataset.sourceInfo = Object.keys(dataSrc).length === 0 ? \"\" : JSON.stringify(dataSrc);\n\n        this._updateBindings();\n        // TODO handle SourceType or SourceInfo change callback\n    }\n\n    /**\n     * Process the list of data tables in the IA runtime and create Tableau bindings for any\n     * whose source type is equal to `IATableauSourceType`\n     */\n    _updateBindings() {\n        const datasets = this.database.datasets;\n\n        datasets.keys.forEach(name => {\n            console.log(\"Processing table \" + name);\n            let dataset = datasets[name];\n\n            // check if binding already exists\n            if (this._datasetBindings[name])\n                return;\n\n            let srcType = dataset.sourceType;\n            if (srcType != IATableauSourceType)\n                return;\n\n            let src = parseJSON(dataset.sourceInfo);\n            if (!src || !src.worksheetName)\n                return;\n\n            let worksheet = this._getTableauWorksheet(src.worksheetName);\n            if (!worksheet)\n            {\n                console.log(\"Worksheet '\" + src.worksheetName + \"' does not exist in this Tableau dashboard\");\n                return;\n            }\n\n            let binding = new IATableauDataSourceBinding(datasets, worksheet, src.logicalTableId, name);\n            this._datasetBindings[name] = binding;\n\n            // TODO handle table or worksheet renaming\n        });\n\n        // Remove inactive bindings\n        for (let name in this._datasetBindings) {\n            if (datasets.containsKey(name))\n                continue;\n\n            const binding = this._datasetBindings[name];\n            binding.dispose();\n            delete this._datasetBindings[name];\n        }\n    }\n\n    /** Compile all Worksheet LogicalTables available in this dashboard */\n    getDataSourcesAsync() {\n        return Promise.all(\n            tableau.extensions.dashboardContent.dashboard.worksheets\n                .map(this._getDataSourcesForWorksheetAsync))\n            .then(dataSources => [].concat(...dataSources));        // Flatten the array of per-worksheet datasource arrays\n    }\n\n    /** Create metadata object for each LogicalTable in this worksheet */\n    _getDataSourcesForWorksheetAsync(worksheet) {\n        return worksheet.getUnderlyingTablesAsync()\n            .then(tables => tables.map(table => {\n                return {                                // build a data source info object for each logical table in the worksheet\n                    name : worksheet.name + '/' + table.id,\n                    type : IATableauSourceType,\n                    worksheetName : worksheet.name,\n                    logicalTableId : table.id\n                };\n            })\n                .concat({\n                    name : worksheet.name + \" (Summary Data)\",\n                    type : IATableauSourceType,\n                    worksheetName : worksheet.name,\n                }));\n    }\n\n    _getTableauWorksheet(sheetName) {\n        // Go through all the worksheets in the dashboard and find the one we want\n        return tableau.extensions.dashboardContent.dashboard.worksheets.find(function(sheet) {\n            return sheet.name === sheetName;\n        });\n    }\n}\n\n\n/**\n * Binds a Tableau LogicalTable to an IA Data Table.\n * Listens for selection or filter changes in the tableau worksheet, then reloads\n * worksheet data for the bound LogicalTable and applies it to the bound IA Data Table\n */\nclass IATableauDataSourceBinding {\n    // TODO dispose this, or don't update when a table is not currently referenced?\n\n    constructor(allDatasets, tableauWorksheet, logicalTableId, datasetName)\n    {\n        this.allDatasets = allDatasets;\n        this.worksheet = tableauWorksheet;\n        this.tableId = logicalTableId;\n        this.datasetName = datasetName;\n        this._unregisterListenerFunctions = [];\n        console.log(\"Initializing data binding for \" + datasetName);\n        this.updateData();\n    }\n\n    dispose() {\n        this._unregisterListeners();\n    }\n\n    /** Unregister selection+filter change listener */\n    _unregisterListeners() {\n        this._unregisterListenerFunctions.forEach(unregister => unregister());\n        this._unregisterListenerFunctions = [];\n    }\n\n    /** Register worksheet selection and filter change listeners */\n    _registerListeners() {\n        let $this = this;\n\n        this._unregisterListenerFunctions.push(this.worksheet.addEventListener(\n            tableau.TableauEventType.MarkSelectionChanged,\n            () => $this.updateData()));\n\n        this._unregisterListenerFunctions.push(this.worksheet.addEventListener(\n            tableau.TableauEventType.FilterChanged,\n            () => $this.updateData()));\n    }\n\n    /** When the Tableau Worksheet data table changes, this method pulls the updated dataset and sends\n     * it to the IA data table/Visualization\n     */\n    updateData() {\n        this._unregisterListeners();\n\n        let $this = this;\n        this.getDataAsync()\n            .then(table => $this.setTableData(table))\n            .then(() => $this._registerListeners())\n    }\n\n    getDataAsync() {\n        let options = {\n            includeAllColumns:true,     // We want to make all columns available to Visualize // TODO only load columns which have been mapped to an axis\n            maxRows: 2000       // AM DEBUGGING We get browser memory errors if too many rows are loaded\n        };\n\n        if (this.tableId)\n            return this.worksheet\n                .getUnderlyingTableDataAsync(this.tableId, options)\n                .then(this.formatUnderlyingTableData);\n        else\n            return this.worksheet\n                .getSummaryDataAsync(options)\n                .then(this.formatSummaryTableData)\n\n    }\n\n    formatUnderlyingTableData(worksheetData) {\n        let dataRows = worksheetData.data;\n\n        const dataColumns = worksheetData.columns.map(function(column) {\n            let type = Tableau2IADataTypeLookup[column.dataType];\n            if (!type)\n                return null;\n\n            let index = column.index;\n\n            return {\n                name : column.fieldName,\n                type : type,\n                data : dataRows.map(row => row[index].nativeValue)\n            }\n        });\n        return dataColumns;\n    }\n\n    formatSummaryTableData(worksheetSummaryData) {\n        const {data, columns} = worksheetSummaryData;\n\n        const dimensions = {}\n        let measureNamesIndex = -1;\n        let measureValuesIndex = -1;\n\n        columns.forEach(column => {\n            const {fieldName, index} = column;\n            if (fieldName == \"Measure Names\")\n                measureNamesIndex = index;\n            else if (fieldName == \"Measure Values\")\n                measureValuesIndex = index;\n            else {\n                dimensions[index] = fieldName;\n            }\n        });\n\n        const hasMeasures = measureNamesIndex >=0 && measureValuesIndex >= 0;\n        // OPTIMIZE if no measures are present, we can shortcut to\n        // use formatUnderlyingTableData() instead\n\n        const itemsLookup = {};\n\n        // Dictionary of (column name => column type)\n        const resultColumnNameTypeLookup = {};\n        Object.entries(dimensions).forEach(entry => {\n            const [index, name] = entry;\n            // Add dimensions to the result column name => type dictionary\n            resultColumnNameTypeLookup[name] = columns[index].dataType;\n        });\n\n        data.forEach(row => {\n            // Build a unique key identifying this item based on its dimensions\n            let itemKey = \"\";\n            for (let index in dimensions)\n                itemKey += '{{' + row[index].formattedValue + '}}';\n\n            // get or create a new object for this unique item\n            let item = itemsLookup[itemKey];\n            if (!item)\n            {\n                item = itemsLookup[itemKey] = {};\n\n                // Store dimensions values in the newly created item\n                for (let index in dimensions)\n                    item[dimensions[index]] = row[index].nativeValue;\n            }\n\n            if (!hasMeasures)\n                return;\n\n            // Store the measure value from this data row\n            const measureName = row[measureNamesIndex].formattedValue;\n            const measureValue = row[measureValuesIndex].nativeValue;\n            item[measureName] = measureValue;\n\n            resultColumnNameTypeLookup[measureName] = 'float';   // Add measure to the result column name dict if not already present\n        });\n\n        const itemsArray = Object.values(itemsLookup);\n\n        return Object.entries(resultColumnNameTypeLookup).map(entry => {\n            let [columnName, columnType] = entry;\n            columnType = Tableau2IADataTypeLookup[columnType];\n            if (!columnType)\n                return null;\n\n            return {\n                name: columnName,\n                type: columnType,\n                data: itemsArray.map(item => item[columnName])\n            };\n        });\n    }\n\n    /** Convert Tableau Worksheet data into IA data table format, and apply to the bound IA Data Table */\n    setTableData(dataColumns) {\n        console.log(\"Dataset update: \" + this.datasetName);\n\n        let dataTable = {\n            name : this.datasetName,\n            columns : dataColumns.filter(c => c)    // remove null columns\n        }\n\n        const dataset = this.allDatasets.getKey(this.datasetName);\n        if (!dataset){\n            console.error(\"Warning: trying to update non-existing dataset: \" + this.datasetName);\n            return;\n        }\n        dataset.setData(dataTable);\n    }\n}\n\n","\nexport const IAWebPlatformId = 'web';\n\nexport class IAWebPlatform {\n    constructor() {\n        this.id = IAWebPlatformId;\n    }\n\n    init(ia, callbacks) {\n        callbacks.onInitialized();\n    }\n\n    openDialog(url, options) {\n        window.location = url;\n    }\n\n    getDataSourcesAsync() {\n        // Web platform has no data sources\n        return new Promise(resolve => {\n            resolve([]);\n        });\n    }\n\n    createTableForDataSource() {\n    }\n\n    saveSettings(settings) {\n    }\n\n}","/**\n * ©2021 Virtual Cove, Inc. d/b/a Immersion Analytics. All Rights Reserved. Patented.\n *\n * Immersion Analytics Runtime - Tableau Dashboard Extension\n * Utilizes the Immersion Analytics Runtime javascript API and Tableau Dashboard Extensions API\n * to drive holographic visualizations in AR/VR/XR devices like Hololens2 or Oculus from a Tableau dashboard\n */\n\n\nimport React, {useEffect, useState} from \"react\";\nimport {BrowserRouter as Router, Route, Switch, withRouter, useLocation, useHistory} from \"react-router-dom\";\n\nimport './styles.css';\nimport IAOverviewDisplay from \"./IAOverviewDisplay\";\nimport IAControlPanel from \"./control-panel/IAControlPanel\";\nimport LoadingSpinner from \"./modals/LoadingSpinner\";\n\nimport IAExtensionController from \"./IAExtensionController\";\nimport {IATableauPlatform, IATableauPlatformId} from \"./platforms/tableau\";\nimport {IAWebPlatform, IAWebPlatformId} from \"./platforms/web\";\nimport {NotFoundPage} from \"./lib\";\n\nconst {IA} = window;\n\n\nconst platformConstructors = {\n    [IAWebPlatformId] : () => new IAWebPlatform(),\n    [IATableauPlatformId] : () => new IATableauPlatform(),\n}\n\nconst OverviewPanelId = 'overview';\nconst ConnectionPanelId = 'connection';\nconst VisualizationsPanelId = 'visualizations';\n\nconst panelConstructors = {\n    [OverviewPanelId] : props => <IAOverviewDisplay {...props} />,\n    [ConnectionPanelId] : props => <IAControlPanel panelId='connection' {...props} />,\n    [VisualizationsPanelId] : props => <IAControlPanel panelId='visualizations' {...props} />\n}\n\n\nfunction useLocationInfo() {\n    const location = useLocation();\n    const path = location.pathname;\n\n    // Note: currently the Blazor WebAssembly may only be invoked from the root directory,\n    // so we have to pack all location info into the first level path segment\n    const segments = path.split('/');\n    if (segments.length < 2)\n        return {};\n\n    const segment = segments[1];\n    const components = segment.split('-');\n    const count = components.length;\n    return {\n        platformId : count > 0 ? components[0] : undefined,\n        panelId : count > 1 ? components[1] : undefined,\n    }\n}\n\nfunction App() {\n    const [iaClient, setIAClient] = useState();\n    const [appController, setAppController] = useState();\n\n    const [isPlatformLoading, setIsPlatformLoading] = useState(true);\n    const history = useHistory();\n    let { platformId, panelId } = useLocationInfo();\n\n    const platformConstructor = platformConstructors[platformId];\n\n    if (!panelId)\n        panelId = ConnectionPanelId;\n\n    console.log(\"Refreshing IA Web Extension UI\");\n\n    const initPlatform = () => {\n\n        if (!platformConstructor)\n        {\n            console.error(\"Unknown platform: \" + platformId);\n            return;\n        }\n\n        const platform = platformConstructor();\n\n        const app = new IAExtensionController(platform, window.ia);\n        setAppController(app);\n\n        platform.init(window.ia, {\n            onInitialized: () => {\n                console.log(`Platform ${platformId} ready`);\n                setIsPlatformLoading(false)\n            },\n\n            onSettingsChanged: settings => {\n              app.handleSettingsChanged(settings);\n            }\n        });\n    };\n\n\n    // Ensure IA Runtime client is initialized\n    useEffect(() => {\n        return IA.onReady(() => {\n            if (iaClient)\n                return; // already created\n\n            console.log(\"IA ready\");\n\n            console.assert(!window.ia, \"IA client has already been created. Invalid state.\");\n\n            // Define a global Immersion Analytics client instance for debugging purposes\n            window.ia = IA.createClient();\n            setIAClient(window.ia);\n\n            initPlatform();\n        });\n    });\n\n\n    const handleConnectionStateChanged = stateId => {\n        if (stateId === \"ConnectedToLobby\" || stateId === \"JoinedRoom\")\n            appController.saveConnectionInfo();\n    }\n\n    useEffect(() => {\n        if (appController)\n            return appController.ia.onStateChanged(handleConnectionStateChanged);\n    })\n\n    // Once the IA Scene synchronization between XR device and web browser is initialized this method will be called\n    const handleRoomConnectionReady = () => {\n        console.log(\"Room connection is ready!\");\n    }\n\n    useEffect(() => {\n        if (appController)\n            return appController.ia.onSyncReady(handleRoomConnectionReady);\n    });\n\n\n    if (!platformConstructors[platformId])\n    {\n        // Default to web platform\n        history.push('/' + IAWebPlatformId);\n        return null;\n    }\n\n    if (isPlatformLoading)\n        return <LoadingSpinner />;\n\n\n    const panelProps = { app: appController, platformId: platformId }\n\n    const panelConstructor = panelConstructors[panelId];\n    if (!panelConstructor)\n        return NotFoundPage(\"Panel\");\n\n    return panelConstructor(panelProps);\n\n\n    // return (\n    //     <Router>\n    //         <Switch>\n    //             {/*Currently platform is assumed to be tableau*/}\n    //             <Route path='/:platformName/control-panel/:panel' component={IAControlPanel} />\n    //             <Route path='/:platformName/control-panel' component={IAControlPanel} />\n    //             <Route path='/:platformName/' component={IAOverviewDisplay} />\n    //         </Switch>\n    //     </Router>\n    // );\n}\n\nexport default App;\n","/**\n * ©2021 Virtual Cove, Inc. d/b/a Immersion Analytics. All Rights Reserved. Patented.\n *\n * Immersion Analytics Runtime - Tableau Dashboard Extension\n * Utilizes the Immersion Analytics Runtime javascript API and Tableau Dashboard Extensions API\n * to drive holographic visualizations in AR/VR/XR devices like Hololens2 or Oculus from a Tableau dashboard\n */\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nimport App from \"./App\";\n\nReactDOM.render(\n    // <Router>\n    //     <Route path='/:platformName/' component={App} />\n    // </Router>,\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}